{
  "numStartups": 28,
  "installMethod": "unknown",
  "autoUpdates": true,
  "customApiKeyResponses": {
    "approved": [],
    "rejected": [
      "4P-C2lJUegA-4U0pOwAA"
    ]
  },
  "tipsHistory": {
    "new-user-warmup": 1,
    "ide-hotkey": 24,
    "shift-enter": 10,
    "memory-command": 9,
    "theme-command": 10,
    "prompt-queue": 25,
    "enter-to-steer-in-relatime": 12,
    "todo-list": 13,
    "# for memory": 15,
    "install-github-app": 16,
    "permissions": 17,
    "drag-and-drop-images": 19,
    "double-esc": 20,
    "continue": 21,
    "custom-commands": 22,
    "shift-tab": 23
  },
  "promptQueueUseCount": 1,
  "firstStartTime": "2025-06-28T22:50:04.280Z",
  "userID": "1b640a7a14381f8fd4ce6ed42182640ba063c46cfa70729e75e3168231565ab8",
  "projects": {
    "/home/conductor": {
      "allowedTools": [],
      "history": [],
      "mcpContextUris": [],
      "mcpServers": {},
      "enabledMcpjsonServers": [],
      "disabledMcpjsonServers": [],
      "hasTrustDialogAccepted": false,
      "projectOnboardingSeenCount": 0,
      "hasClaudeMdExternalIncludesApproved": false,
      "hasClaudeMdExternalIncludesWarningShown": false
    },
    "/workspace": {
      "allowedTools": [],
      "history": [
        {
          "display": "ok and when i start staging and committing them again, I'm not changing the history of the git log, right?",
          "pastedContents": {}
        },
        {
          "display": "if I reset without --soft, I don't lose any changes, right?",
          "pastedContents": {}
        },
        {
          "display": "I just made a commit with too many files by accident.  is there a way I can undo that?",
          "pastedContents": {}
        },
        {
          "display": "please update the architecture and plan docs accordingly",
          "pastedContents": {}
        },
        {
          "display": "/zen:chat using o3 to determine if there is a better alternative zen tool to use as proof of concept in the discovery mode for phase 1",
          "pastedContents": {}
        },
        {
          "display": "With the mode-system-architecture.md phases starting with phase 1 focused on discovery, why choose the ZenSecurityAgent as the proof of concept?",
          "pastedContents": {}
        },
        {
          "display": "/model ",
          "pastedContents": {}
        },
        {
          "display": "please capture a plan and architecture for this in .conductor/design",
          "pastedContents": {}
        },
        {
          "display": "chat with zen about the requirements in PRD.md and architecture described in mode-system-architecture.md and pick the best model for this job.  I need to revisit the basic assumptions of this project in light of what the zen tools bring to the table for consideration.  The question I want to discuss is whether zen's tools change how I should think about the requirements and/or architecture",
          "pastedContents": {}
        },
        {
          "display": "/clear ",
          "pastedContents": {}
        },
        {
          "display": "chat with zen about the requirements in PRD.md and architecture described in mode-system-architecture.md and pick the best model for this job.  I need to revisit the basic assumptions of this project in light of what the zen tools bring to the table for consideration.  The question I want to discuss is whether zen's tools change how I should think about the requirements and/or architecture",
          "pastedContents": {}
        },
        {
          "display": "/clear ",
          "pastedContents": {}
        },
        {
          "display": "clear",
          "pastedContents": {}
        },
        {
          "display": "/zen:version (MCP) ",
          "pastedContents": {}
        },
        {
          "display": "ask zen to list models",
          "pastedContents": {}
        },
        {
          "display": "hi",
          "pastedContents": {}
        },
        {
          "display": "/doctor ",
          "pastedContents": {}
        },
        {
          "display": "ask zen to list the models",
          "pastedContents": {}
        },
        {
          "display": "/mcp ",
          "pastedContents": {}
        },
        {
          "display": "let's take option 2",
          "pastedContents": {}
        },
        {
          "display": "I'm running in a devcontainer defined by the files under the ./.devcontainer/ folder.  You might notice that one of the mounts is for bashhistory.  I've noticed that my bash history in terminals in the container sometimes include extra \"stuff\" that I'm not sure where it's coming from, e.g. I used the up-arrow and got this: 1751146164:0;claude mcp add sequential-thinking npx \"-y @modelcontextprotocol/server-sequential-thinking\"",
          "pastedContents": {}
        },
        {
          "display": "look at the CHANGELOG.md file in the root of the project, then the PRD.md and mode-system-architecture.md files that are changed, and being sure to thoroughly understand what changes were made and why.  then (1) look through the taskmaster tasks that are done and examine the current implementation to see what, if anything, needs to change from what's already been completed and add these changes as tasks and/or subtasks where appropriate, then (2) look through the future tasks to see what, if anything, needs to be changed in the upcoming tasks because they are in conflict with these changes and make these changes as necessary, then (3) add new tasks, inserting them where appropriate and/or managing dependencies to ensure we know how to sequence them, to apply the changes to the tasks ahead of us.  NOTE that these taskmaster tasks should really only focus on phase 1, so you do not need to add tasks for the changes slated for future phases.",
          "pastedContents": {}
        },
        {
          "display": "use taskmaster to add one or more tasks for the following: I want a UI that can act as a kind of dashboard and control center for conductor.  This means that conductor's functions need to be publishing sufficient observability metrics so that this dashboard can monitor and show what's happening in real time, as well as allow the user to understand the state of the project (from conductor's POV).  Ideally the user can also use the UI to trigger certain activities (no much different from the command line).  If you need to break this up into multiple tasks, that's fine.  If you need more info about these to publish clear tasks, just ask.",
          "pastedContents": {}
        },
        {
          "display": "/clear ",
          "pastedContents": {}
        },
        {
          "display": "You claim to have just completed taskmaster task 4.3.  Confirm that the code you wrote compiles, passes lint and formatting tests.",
          "pastedContents": {}
        },
        {
          "display": "/clear ",
          "pastedContents": {}
        },
        {
          "display": "let's use taskmaster to add the following task: re-think the ./conductor folder structure and how it overlaps with / is complementary to a task management system, e.g. the product requirements will be curated and created under ./conductor/ somewhere, but the task management may want or expect specific documents in its own storage area.  I want to keep the conductor sufficiently decoupled from the task management (e.g. taskmaster) to allow flexible integration with other systems, so conductor's fileset must be completely self-contained and able to write to and read from / sync from the task manager's storge.",
          "pastedContents": {}
        },
        {
          "display": "ask taskmaster what's next and get started on it",
          "pastedContents": {}
        },
        {
          "display": "/clear ",
          "pastedContents": {}
        },
        {
          "display": "go ahead and simplify the overengineered EnhancedMode: 1. Remove EnhancedMode interface\n  2. Move all its capabilities directly into the Mode interface\n  3. Update AbstractMode to implement Mode directly\n  4. Update the README to remove the backward compatibility claims",
          "pastedContents": {}
        },
        {
          "display": "/compact ",
          "pastedContents": {}
        },
        {
          "display": "what was the backward compatibility that you're trying to maintain by introducing EnhancedMode and not just updating the Mode interface?",
          "pastedContents": {}
        },
        {
          "display": "The src/modes/README.md you created looks too redundant with the actual code.  Let's keep this conceptual, informing the reader about high-level information and large concepts as well as any key decisions made about the subject matter.  Refer to actual source code or architecture documentation if necessary, but don't repeat it here unless it is critical to the reader's understanding in the context of the document.",
          "pastedContents": {}
        },
        {
          "display": "Let's add some instruction into this project's CLAUDE.md file to remind you to (a) always ensure that task as well as subtask statuses are maintained, (b) always adequately document your code, (c) always use TODOs and/or FIXMEs in code that you write intending to have a future task or phase complete the placeholder or fix the problem you're intentionally leaving.",
          "pastedContents": {}
        },
        {
          "display": "The commit hook is triggering to block commit - make sure you have no errors, linting or formatting issues in the workspacwe.",
          "pastedContents": {}
        },
        {
          "display": "/mcp ",
          "pastedContents": {}
        },
        {
          "display": "/mpc",
          "pastedContents": {}
        },
        {
          "display": "this project is executing within a devcontainer, defined by the files in the ./.devcontainer/ folder.  I just copied in a task-master-ai-0.18.1-dev-tgz into this folder.  Currently the devcontainer files (Docker and devcontainer.json) are installing task-master-ai thru an npm install, but I want to make sure that instead of pulling the public version, this one is installed.",
          "pastedContents": {}
        },
        {
          "display": "USe taskmaster to make sure that task 4 is in progress, and then let's make sure that the abstract-mode.ts file has TODOs and/or FIXMEs where you left work for a future task.",
          "pastedContents": {}
        },
        {
          "display": "proceed with 4.2, making sure you think deeply about what you are doing, being careful to not over-engineer, don't re-invent wheels where there are existing OSS or in-project capabilities, make sure you're adding appropriate tests with appropriate mocks, and ensure code is well-documented.",
          "pastedContents": {}
        },
        {
          "display": "ask taskmaster what's next",
          "pastedContents": {}
        },
        {
          "display": "/clear ",
          "pastedContents": {}
        },
        {
          "display": "let's do it",
          "pastedContents": {}
        },
        {
          "display": "should we update the subtasks to reference our architecture document?  Or would it be better to update the CLAUDE.md to do so?",
          "pastedContents": {}
        },
        {
          "display": "Right, so let's do two things (add these to your own todos along with any additional todos or sub-todos needed): (1) fix the mode-system-architecture documentation to reflect your improved understanding of discovery.  (2) Let's add an \"analyze\" mode to the product requirements that covers the kind of codebase analysis you wrongly attributed to discovery.  (3) analyze the taskmaster todos and tell me if we need to re-plan the tasks or subtasks b/c of this change.",
          "pastedContents": {}
        },
        {
          "display": "I'm looking through the mode-system-architecture.md and have a question about discovery mode.  It looks like discovery focuses on exploring the codebase, is that right?  Where are you getting that from in the requirements PRD?",
          "pastedContents": {}
        },
        {
          "display": "yes, let's start with 4.1.  Remember to use taskmaster to set the task and subtask statuses appropriately.",
          "pastedContents": {}
        },
        {
          "display": "/model ",
          "pastedContents": {}
        },
        {
          "display": "let's expand task 4 into subtasks.  do you think one of the subtasks should be a more detailed architecture for this task?",
          "pastedContents": {}
        },
        {
          "display": "ask taskmaster what's the next task we need to work on",
          "pastedContents": {}
        },
        {
          "display": "Why do we need file operations?  What will it be used for?",
          "pastedContents": {}
        },
        {
          "display": "/compact ",
          "pastedContents": {}
        },
        {
          "display": "ok, let's do task 3.4",
          "pastedContents": {}
        },
        {
          "display": "looks like there are either some compile errors or linting or formatting errors.  The commit hook is triggering.",
          "pastedContents": {}
        },
        {
          "display": "lets proceed with the next subtask.  Be sure to manage the task and subtask status using taskmaster",
          "pastedContents": {}
        },
        {
          "display": "/compact ",
          "pastedContents": {}
        },
        {
          "display": "what can we do with this project so far?  Is there anything functional I can test on my own besides running the tests?",
          "pastedContents": {}
        },
        {
          "display": "you need to update the task using taskmaster-ai",
          "pastedContents": {}
        },
        {
          "display": "Let's get started on 3.5.  Keep in mind another agent is actively working (you can see the subtask that is in progress).  If you believe there's a risk of conflicting or overlapping changes, stop - we can wait for the other agent to finish.",
          "pastedContents": {}
        },
        {
          "display": "I'm now working on 3.2 in another agent, are there other tasks we could be working on in parallel that would not overlap?  Don't start working on them - just let me know.",
          "pastedContents": {}
        },
        {
          "display": "proceed",
          "pastedContents": {}
        },
        {
          "display": "good.  now, I want you to look at the tasks - we've just completed 3.1.  There are three files modified or created.  I want you to examine these files and tell me if we're over-engineering or if this is the right thing we should have done.",
          "pastedContents": {}
        },
        {
          "display": "looks like the project isn't building without errors which is preventing git commits",
          "pastedContents": {}
        },
        {
          "display": "ask taskmaster-ai what the next task is",
          "pastedContents": {}
        },
        {
          "display": "/model ",
          "pastedContents": {}
        },
        {
          "display": "/mcp ",
          "pastedContents": {}
        },
        {
          "display": "where does claude code store the MCP logs?",
          "pastedContents": {}
        },
        {
          "display": "/mcp ",
          "pastedContents": {}
        },
        {
          "display": "I ran that install just now from the terminal (npm install -g @modelcontextprotocol/sdk fastmcp) and it succeeded.  Then I tried running the npx command again - same exact error.",
          "pastedContents": {}
        },
        {
          "display": "I'm running in a devcontainer.  How do I modify the devcontainer configuration to do this as part of the container build?",
          "pastedContents": {}
        },
        {
          "display": "my taskmaster-ai mcp server is failing to start.  If I run the npx command directly in bash, I see: [Pasted text #1 +10 lines]",
          "pastedContents": {
            "1": {
              "id": 1,
              "type": "text",
              "content": "Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/conductor/.npm/_npx/0726791833487271/node_modules/@modelcontextprotocol/sdk/server/index.js' imported from /home/conductor/.npm/_npx/0726791833487271/node_modules/fastmcp/dist/FastMCP.js\n    at finalizeResolution (node:internal/modules/esm/resolve:283:11)\n    at moduleResolve (node:internal/modules/esm/resolve:952:10)\n    at defaultResolve (node:internal/modules/esm/resolve:1188:11)\n    at ModuleLoader.defaultResolve (node:internal/modules/esm/loader:642:12)\n    at #cachedDefaultResolve (node:internal/modules/esm/loader:591:25)\n    at ModuleLoader.resolve (node:internal/modules/esm/loader:574:38)\n    at ModuleLoader.getModuleJobForImport (node:internal/modules/esm/loader:236:38)\n    at ModuleJob._link (node:internal/modules/esm/module_job:130:49) {\n  code: 'ERR_MODULE_NOT_FOUND',\n  url: 'file:///home/conductor/.npm/_npx/0726791833487271/node_modules/@modelcontextprotocol/sdk/server/index.js'"
            }
          }
        },
        {
          "display": "/mcp ",
          "pastedContents": {}
        },
        {
          "display": "ok, let's get started one subtask at a time.  remember to also keep the main task's status up to date as well as the subtasks'.",
          "pastedContents": {}
        },
        {
          "display": "Do you mean that we'll be writing typescript code to read and update these files?  I assumed that the LLM would be creating the content based on templates that we still have to design?",
          "pastedContents": {}
        },
        {
          "display": "why do we need the markdown file handling with frontmatter support?",
          "pastedContents": {}
        },
        {
          "display": "ask taskmaster what's next",
          "pastedContents": {}
        }
      ],
      "mcpContextUris": [],
      "mcpServers": {},
      "enabledMcpjsonServers": [],
      "disabledMcpjsonServers": [],
      "hasTrustDialogAccepted": true,
      "projectOnboardingSeenCount": 0,
      "hasClaudeMdExternalIncludesApproved": false,
      "hasClaudeMdExternalIncludesWarningShown": false,
      "hasCompletedProjectOnboarding": true,
      "exampleFiles": [
        "cli.ts",
        "main.ts",
        "tasks.json",
        "config.ts",
        "types.ts"
      ],
      "exampleFilesGeneratedAt": 1751151280826,
      "lastTotalWebSearchRequests": 0,
      "lastCost": 0.3041126999999999,
      "lastAPIDuration": 382349,
      "lastDuration": 201613,
      "lastLinesAdded": 0,
      "lastLinesRemoved": 0,
      "lastTotalInputTokens": 28333,
      "lastTotalOutputTokens": 1502,
      "lastTotalCacheCreationInputTokens": 58192,
      "lastTotalCacheReadInputTokens": 173795,
      "lastSessionId": "a1d75602-b2f4-4fed-bebf-3430f5bdc9b8"
    },
    "/home/conductor/.claude": {
      "allowedTools": [],
      "history": [],
      "mcpContextUris": [],
      "mcpServers": {},
      "enabledMcpjsonServers": [],
      "disabledMcpjsonServers": [],
      "hasTrustDialogAccepted": false,
      "projectOnboardingSeenCount": 0,
      "hasClaudeMdExternalIncludesApproved": false,
      "hasClaudeMdExternalIncludesWarningShown": false
    }
  },
  "mcpServers": {
    "git": {
      "type": "stdio",
      "command": "uvx",
      "args": [
        "mcp-server-git"
      ],
      "env": {}
    },
    "sequential-thinking": {
      "type": "stdio",
      "command": "npx",
      "args": [
        "-y",
        "@modelcontextprotocol/server-sequential-thinking"
      ],
      "env": {}
    },
    "memory": {
      "type": "stdio",
      "command": "npx",
      "args": [
        "-y",
        "@modelcontextprotocol/server-memory"
      ],
      "env": {}
    },
    "context7": {
      "type": "sse",
      "url": "https://mcp.context7.com/sse"
    },
    "puppeteer": {
      "type": "stdio",
      "command": "npx",
      "args": [
        "-y",
        "@modelcontextprotocol/server-puppeteer"
      ],
      "env": {}
    },
    "taskmaster-ai": {
      "type": "stdio",
      "command": "npx",
      "args": [
        "-y",
        "--package=task-master-ai",
        "--package=@modelcontextprotocol/sdk",
        "task-master-ai"
      ],
      "env": {}
    }
  },
  "shiftEnterKeyBindingInstalled": true,
  "hasCompletedOnboarding": true,
  "lastOnboardingVersion": "1.0.41",
  "cachedChangelog": "# Changelog\n\n## 1.0.41\n\n- Hooks: Split Stop hook triggering into Stop and SubagentStop\n- Hooks: Enabled optional timeout configuration for each command\n- Hooks: Added \"hook_event_name\" to hook input\n- Fixed a bug where MCP tools would display twice in tool list\n- New tool parameters JSON for Bash tool in `tool_decision` event\n\n## 1.0.40\n\n- Fixed a bug causing API connection errors with UNABLE_TO_GET_ISSUER_CERT_LOCALLY if `NODE_EXTRA_CA_CERTS` was set\n\n## 1.0.39\n\n- New Active Time metric in OpenTelemetry logging\n\n## 1.0.38\n\n- Released hooks. Special thanks to community input in https://github.com/anthropics/claude-code/issues/712. Docs: https://docs.anthropic.com/en/docs/claude-code/hooks\n\n## 1.0.37\n\n- Remove ability to set `Proxy-Authorization` header via ANTHROPIC_AUTH_TOKEN or apiKeyHelper\n\n## 1.0.36\n\n- Web search now takes today's date into context\n- Fixed a bug where stdio MCP servers were not terminating properly on exit\n\n## 1.0.35\n\n- Added support for MCP OAuth Authorization Server discovery\n\n## 1.0.34\n\n- Fixed a memory leak causing a MaxListenersExceededWarning message to appear\n\n## 1.0.33\n\n- Improved logging functionality with session ID support\n- Added undo functionality (Ctrl+Z and vim 'u' command)\n- Improvements to plan mode\n\n## 1.0.32\n\n- Updated loopback config for litellm\n- Added forceLoginMethod setting to bypass login selection screen\n\n## 1.0.31\n\n- Fixed a bug where ~/.claude.json would get reset when file contained invalid JSON\n\n## 1.0.30\n\n- Custom slash commands: Run bash output, @-mention files, enable thinking with thinking keywords\n- Improved file path autocomplete with filename matching\n- Added timestamps in Ctrl-r mode and fixed Ctrl-c handling\n- Enhanced jq regex support for complex filters with pipes and select\n\n## 1.0.29\n\n- Improved CJK character support in cursor navigation and rendering\n\n## 1.0.28\n\n- Slash commands: Fix selector display during history navigation\n- Resizes images before upload to prevent API size limit errors\n- Added XDG_CONFIG_HOME support to configuration directory\n- Performance optimizations for memory usage\n- New attributes (terminal.type, language) in OpenTelemetry logging\n\n## 1.0.27\n\n- Streamable HTTP MCP servers are now supported\n- Remote MCP servers (SSE and HTTP) now support OAuth\n- MCP resources can now be @-mentioned\n- /resume slash command to switch conversations within Claude Code\n\n## 1.0.25\n\n- Slash commands: moved \"project\" and \"user\" prefixes to descriptions\n- Slash commands: improved reliability for command discovery\n- Improved support for Ghostty\n- Improved web search reliability\n\n## 1.0.24\n\n- Improved /mcp output\n- Fixed a bug where settings arrays got overwritten instead of merged\n\n## 1.0.23\n\n- Released TypeScript SDK: import @anthropic-ai/claude-code to get started\n- Released Python SDK: pip install claude-code-sdk to get started\n\n## 1.0.22\n\n- SDK: Renamed `total_cost` to `total_cost_usd`\n\n## 1.0.21\n\n- Improved editing of files with tab-based indentation\n- Fix for tool_use without matching tool_result errors\n- Fixed a bug where stdio MCP server processes would linger after quitting Claude Code\n\n## 1.0.18\n\n- Added --add-dir CLI argument for specifying additional working directories\n- Added streaming input support without require -p flag\n- Improved startup performance and session storage performance\n- Added CLAUDE_BASH_MAINTAIN_PROJECT_WORKING_DIR environment variable to freeze working directory for bash commands\n- Added detailed MCP server tools display (/mcp)\n- MCP authentication and permission improvements\n- Added auto-reconnection for MCP SSE connections on disconnect\n- Fixed issue where pasted content was lost when dialogs appeared\n\n## 1.0.17\n\n- We now emit messages from sub-tasks in -p mode (look for the parent_tool_use_id property)\n- Fixed crashes when the VS Code diff tool is invoked multiple times quickly\n- MCP server list UI improvements\n- Update Claude Code process title to display \"claude\" instead of \"node\"\n\n## 1.0.11\n\n- Claude Code can now also be used with a Claude Pro subscription\n- Added /upgrade for smoother switching to Claude Max plans\n- Improved UI for authentication from API keys and Bedrock/Vertex/external auth tokens\n- Improved shell configuration error handling\n- Improved todo list handling during compaction\n\n## 1.0.10\n\n- Added markdown table support\n- Improved streaming performance\n\n## 1.0.8\n\n- Fixed Vertex AI region fallback when using CLOUD_ML_REGION\n- Increased default otel interval from 1s -> 5s\n- Fixed edge cases where MCP_TIMEOUT and MCP_TOOL_TIMEOUT weren't being respected\n- Fixed a regression where search tools unnecessarily asked for permissions\n- Added support for triggering thinking non-English languages\n- Improved compacting UI\n\n## 1.0.7\n\n- Renamed /allowed-tools -> /permissions\n- Migrated allowedTools and ignorePatterns from .claude.json -> settings.json\n- Deprecated claude config commands in favor of editing settings.json\n- Fixed a bug where --dangerously-skip-permissions sometimes didn't work in --print mode\n- Improved error handling for /install-github-app\n- Bugfixes, UI polish, and tool reliability improvements\n\n## 1.0.6\n\n- Improved edit reliability for tab-indented files\n- Respect CLAUDE_CONFIG_DIR everywhere\n- Reduced unnecessary tool permission prompts\n- Added support for symlinks in @file typeahead\n- Bugfixes, UI polish, and tool reliability improvements\n\n## 1.0.4\n\n- Fixed a bug where MCP tool errors weren't being parsed correctly\n\n## 1.0.1\n\n- Added `DISABLE_INTERLEAVED_THINKING` to give users the option to opt out of interleaved thinking.\n- Improved model references to show provider-specific names (Sonnet 3.7 for Bedrock, Sonnet 4 for Console)\n- Updated documentation links and OAuth process descriptions\n\n## 1.0.0\n\n- Claude Code is now generally available\n- Introducing Sonnet 4 and Opus 4 models\n\n## 0.2.125\n\n- Breaking change: Bedrock ARN passed to `ANTHROPIC_MODEL` or `ANTHROPIC_SMALL_FAST_MODEL` should no longer contain an escaped slash (specify `/` instead of `%2F`)\n- Removed `DEBUG=true` in favor of `ANTHROPIC_LOG=debug`, to log all requests\n\n## 0.2.117\n\n- Breaking change: --print JSON output now returns nested message objects, for forwards-compatibility as we introduce new metadata fields\n- Introduced settings.cleanupPeriodDays\n- Introduced CLAUDE_CODE_API_KEY_HELPER_TTL_MS env var\n- Introduced --debug mode\n\n## 0.2.108\n\n- You can now send messages to Claude while it works to steer Claude in real-time\n- Introduced BASH_DEFAULT_TIMEOUT_MS and BASH_MAX_TIMEOUT_MS env vars\n- Fixed a bug where thinking was not working in -p mode\n- Fixed a regression in /cost reporting\n- Deprecated MCP wizard interface in favor of other MCP commands\n- Lots of other bugfixes and improvements\n\n## 0.2.107\n\n- CLAUDE.md files can now import other files. Add @path/to/file.md to ./CLAUDE.md to load additional files on launch\n\n## 0.2.106\n\n- MCP SSE server configs can now specify custom headers\n- Fixed a bug where MCP permission prompt didn't always show correctly\n\n## 0.2.105\n\n- Claude can now search the web\n- Moved system & account status to /status\n- Added word movement keybindings for Vim\n- Improved latency for startup, todo tool, and file edits\n\n## 0.2.102\n\n- Improved thinking triggering reliability\n- Improved @mention reliability for images and folders\n- You can now paste multiple large chunks into one prompt\n\n## 0.2.100\n\n- Fixed a crash caused by a stack overflow error\n- Made db storage optional; missing db support disables --continue and --resume\n\n## 0.2.98\n\n- Fixed an issue where auto-compact was running twice\n\n## 0.2.96\n\n- Claude Code can now also be used with a Claude Max subscription (https://claude.ai/upgrade)\n\n## 0.2.93\n\n- Resume conversations from where you left off from with \"claude --continue\" and \"claude --resume\"\n- Claude now has access to a Todo list that helps it stay on track and be more organized\n\n## 0.2.82\n\n- Added support for --disallowedTools\n- Renamed tools for consistency: LSTool -> LS, View -> Read, etc.\n\n## 0.2.75\n\n- Hit Enter to queue up additional messages while Claude is working\n- Drag in or copy/paste image files directly into the prompt\n- @-mention files to directly add them to context\n- Run one-off MCP servers with `claude --mcp-config <path-to-file>`\n- Improved performance for filename auto-complete\n\n## 0.2.74\n\n- Added support for refreshing dynamically generated API keys (via apiKeyHelper), with a 5 minute TTL\n- Task tool can now perform writes and run bash commands\n\n## 0.2.72\n\n- Updated spinner to indicate tokens loaded and tool usage\n\n## 0.2.70\n\n- Network commands like curl are now available for Claude to use\n- Claude can now run multiple web queries in parallel\n- Pressing ESC once immediately interrupts Claude in Auto-accept mode\n\n## 0.2.69\n\n- Fixed UI glitches with improved Select component behavior\n- Enhanced terminal output display with better text truncation logic\n\n## 0.2.67\n\n- Shared project permission rules can be saved in .claude/settings.json\n\n## 0.2.66\n\n- Print mode (-p) now supports streaming output via --output-format=stream-json\n- Fixed issue where pasting could trigger memory or bash mode unexpectedly\n\n## 0.2.63\n\n- Fixed an issue where MCP tools were loaded twice, which caused tool call errors\n\n## 0.2.61\n\n- Navigate menus with vim-style keys (j/k) or bash/emacs shortcuts (Ctrl+n/p) for faster interaction\n- Enhanced image detection for more reliable clipboard paste functionality\n- Fixed an issue where ESC key could crash the conversation history selector\n\n## 0.2.59\n\n- Copy+paste images directly into your prompt\n- Improved progress indicators for bash and fetch tools\n- Bugfixes for non-interactive mode (-p)\n\n## 0.2.54\n\n- Quickly add to Memory by starting your message with '#'\n- Press ctrl+r to see full output for long tool results\n- Added support for MCP SSE transport\n\n## 0.2.53\n\n- New web fetch tool lets Claude view URLs that you paste in\n- Fixed a bug with JPEG detection\n\n## 0.2.50\n\n- New MCP \"project\" scope now allows you to add MCP servers to .mcp.json files and commit them to your repository\n\n## 0.2.49\n\n- Previous MCP server scopes have been renamed: previous \"project\" scope is now \"local\" and \"global\" scope is now \"user\"\n\n## 0.2.47\n\n- Press Tab to auto-complete file and folder names\n- Press Shift + Tab to toggle auto-accept for file edits\n- Automatic conversation compaction for infinite conversation length (toggle with /config)\n\n## 0.2.44\n\n- Ask Claude to make a plan with thinking mode: just say 'think' or 'think harder' or even 'ultrathink'\n\n## 0.2.41\n\n- MCP server startup timeout can now be configured via MCP_TIMEOUT environment variable\n- MCP server startup no longer blocks the app from starting up\n\n## 0.2.37\n\n- New /release-notes command lets you view release notes at any time\n- `claude config add/remove` commands now accept multiple values separated by commas or spaces\n\n## 0.2.36\n\n- Import MCP servers from Claude Desktop with `claude mcp add-from-claude-desktop`\n- Add MCP servers as JSON strings with `claude mcp add-json <n> <json>`\n\n## 0.2.34\n\n- Vim bindings for text input - enable with /vim or /config\n\n## 0.2.32\n\n- Interactive MCP setup wizard: Run \"claude mcp add\" to add MCP servers with a step-by-step interface\n- Fix for some PersistentShell issues\n\n## 0.2.31\n\n- Custom slash commands: Markdown files in .claude/commands/ directories now appear as custom slash commands to insert prompts into your conversation\n- MCP debug mode: Run with --mcp-debug flag to get more information about MCP server errors\n\n## 0.2.30\n\n- Added ANSI color theme for better terminal compatibility\n- Fixed issue where slash command arguments weren't being sent properly\n- (Mac-only) API keys are now stored in macOS Keychain\n\n## 0.2.26\n\n- New /approved-tools command for managing tool permissions\n- Word-level diff display for improved code readability\n- Fuzzy matching for slash commands\n\n## 0.2.21\n\n- Fuzzy matching for /commands\n",
  "changelogLastFetched": 1751553137221,
  "lastReleaseNotesSeen": "1.0.41",
  "subscriptionNoticeCount": 0,
  "hasAvailableSubscription": false,
  "hasIdeOnboardingBeenShown": {
    "vscode": true
  },
  "fallbackAvailableWarningThreshold": 0.2,
  "bypassPermissionsModeAccepted": true,
  "oauthAccount": {
    "accountUuid": "98a17cc0-b04d-4e76-a8ea-2a39a4d7c03c",
    "emailAddress": "scotthamilton77@gmail.com",
    "organizationUuid": "e2c8c4a3-3dd4-4342-b043-7efd0be62727",
    "organizationRole": "admin",
    "workspaceRole": null,
    "organizationName": "Scott Jason Hamilton"
  }
}